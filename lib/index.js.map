{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import * as yup from 'yup';\r\nimport { AnySchema, SchemaDescription } from \"yup/lib/schema\";\r\n\r\nconst __yuptoswagger__: any = { debug: false }\r\n\r\nconst { warn: warn_ } = console;\r\nconsole.warn = (...args) => __yuptoswagger__.debug ? warn_(...args) : undefined\r\n\r\ntype YTSCompilerOptions = {\r\n    debug: boolean;\r\n}\r\n\r\nclass YTSCompiler {\r\n    protected debug: boolean = false;\r\n    constructor(options?: YTSCompilerOptions) {\r\n        const keys: string[] = Object.keys(options || {});\r\n        for (let key of keys) {\r\n            switch (key) {\r\n                case \"debug\":\r\n                    __yuptoswagger__.debug = true;\r\n                    break;\r\n                default:\r\n                    console.warn(`${key} is not recognized as a valid option property`)\r\n            }\r\n        }\r\n    }\r\n\r\n    parse_tests(type: string, tests: any[]): any {\r\n        const map: any = {\r\n          \"string\": {\r\n              \"min\": \"minLength\",\r\n              \"max\": \"maxLength\",\r\n              \"email\": \"format\",\r\n              \"url\": \"format\",\r\n              \"uuid\": \"format\",\r\n              \"matches\": [ \"pattern\", \"regex\" ],\r\n              // required: todo\r\n          }\r\n        }\r\n\r\n        let properties: any = {};\r\n        const type_map = map[type];\r\n        for (let test of tests){\r\n            console.log(\"TEST: \", test)\r\n            const { name, params } = test;\r\n            const match = type_map[name]\r\n            if (!match) {\r\n              console.warn(`[WARN] yuptoswagger.js: ignoring ${name}`)\r\n              continue\r\n            }\r\n            if (isArray(match) && match.length == 2) {\r\n              const [ key, value_key ] = match;\r\n              const value = params[value_key]\r\n              const value_str = value.toString ? value.toString() : value\r\n              properties[key] = value_str\r\n              continue\r\n            }\r\n            const value = params[name] || name\r\n            properties[match] = value;\r\n            console.log({ [match]: value })\r\n        }\r\n        return properties\r\n    }\r\n    parse_string_schema(type: string, properties: any) {\r\n        const { oneOf, tests } = properties;\r\n        \r\n        const enum_ = oneOf;\r\n\r\n        const schema: any = { type, enum: enum_ }\r\n        const from_test_properties = this.parse_tests(type, tests);\r\n      \r\n        console.log({ from_test_properties })\r\n        return mergeObjects({}, schema, from_test_properties);\r\n    }\r\n    parse_object_schema(type: string, properties: any) {\r\n      const schema = { type }\r\n      const fields = []\r\n      for (const field_key of Object.keys(properties.fields)) {\r\n        const field: SchemaDescription = properties.fields[field_key];\r\n        const parsed = this.compile(field)\r\n        fields.push(parsed);\r\n      }\r\n      return { ...schema, fields }\r\n    }\r\n    isYupSchema<T extends AnySchema>(object: T): T | false {\r\n      return object.__isYupSchema__ ? object : false;\r\n    }\r\n    compile(schema: AnySchema | SchemaDescription): any;\r\n    compile(schema: AnySchema | SchemaDescription) {\r\n      let schema_description = schema;\r\n      \r\n      const yupSchema = this.isYupSchema(schema as AnySchema)\r\n      if (yupSchema) schema_description = yupSchema.describe();\r\n\r\n      console.log(schema_description,'schema_description');\r\n\r\n      const { type, ...properties } = schema_description;\r\n\r\n      switch (type) {\r\n          case \"string\": return this.parse_string_schema(type, properties)\r\n          case \"object\": return this.parse_object_schema(type, properties)\r\n      }\r\n      return { failed: true }\r\n    }\r\n}\r\n\r\nexport default YTSCompiler;\r\n\r\nconst isObject = (item: any) => {\r\n  return (item && typeof item === 'object' && !Array.isArray(item))\r\n}\r\n\r\nconst isArray = (item: any) => {\r\n  return (item && typeof item === 'object' && Array.isArray(item))\r\n}\r\n\r\nconst mergeObjects: any = (target: any, ...sources: any) => {\r\n    if (!sources.length) return target;\r\n    const source = sources.shift();\r\n  \r\n    if (isObject(target) && isObject(source)) {\r\n      for (const key in source) {\r\n        if (isObject(source[key])) {\r\n          if (!target[key]) target[key] = {}\r\n          mergeObjects(target[key], source[key])\r\n        } \r\n        else if (isArray(source[key]) && isArray(target[key])) {\r\n          target[key] = target[key].concat(source[key]) \r\n        }\r\n        else {\r\n          Object.assign(target, { [key]: source[key] })\r\n        }\r\n      }\r\n    }\r\n  \r\n    return mergeObjects(target, ...sources);\r\n  }"],"names":["__yuptoswagger__","debug","warn","warn_","console","args","undefined","YTSCompiler","constructor","options","keys","Object","key","parse_tests","type","tests","map","properties","type_map","test","log","name","params","match","isArray","length","value_key","value","value_str","toString","parse_string_schema","oneOf","enum_","schema","enum","from_test_properties","mergeObjects","parse_object_schema","fields","field_key","field","parsed","compile","push","isYupSchema","object","__isYupSchema__","schema_description","yupSchema","describe","failed","isObject","item","Array","target","sources","source","shift","concat","assign"],"mappings":"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"}