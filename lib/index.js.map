{"version":3,"file":"index.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["\r\nexport const isObject = (item: any) => {\r\n  return (item && typeof item === 'object' && !Array.isArray(item))\r\n}\r\n\r\nexport const isArray = (item: any) => {\r\n  return (item && typeof item === 'object' && Array.isArray(item))\r\n}\r\n\r\nexport const mergeObjects: any = (target: any, ...sources: any) => {\r\n    if (!sources.length) return target;\r\n    const source = sources.shift();\r\n  \r\n    if (isObject(target) && isObject(source)) {\r\n      for (const key in source) {\r\n        if (isObject(source[key])) {\r\n          if (!target[key]) target[key] = {}\r\n          mergeObjects(target[key], source[key])\r\n        } \r\n        else if (isArray(source[key]) && isArray(target[key])) {\r\n          target[key] = target[key].concat(source[key]) \r\n        }\r\n        else {\r\n          Object.assign(target, { [key]: source[key] })\r\n        }\r\n      }\r\n    }\r\n  \r\n    return mergeObjects(target, ...sources);\r\n  }","import * as yup from 'yup';\r\nimport { AnySchema, SchemaDescription } from \"yup/lib/schema\";\r\nimport { isArray, mergeObjects } from \"./utils\";\r\n\r\nconst __yuptoswagger__: any = { debug: false }\r\n\r\nconst { warn: warn_ } = console;\r\nconsole.warn = (...args) => __yuptoswagger__.debug ? warn_(...args) : undefined\r\n\r\ntype YTSCompilerOptions = {\r\n    debug: boolean;\r\n}\r\n\r\nclass YTSCompiler {\r\n    protected debug: boolean = false;\r\n    constructor(options?: YTSCompilerOptions) {\r\n        const keys: string[] = Object.keys(options || {});\r\n        for (let key of keys) {\r\n            switch (key) {\r\n                case \"debug\":\r\n                    __yuptoswagger__.debug = true;\r\n                    break;\r\n                default:\r\n                    console.warn(`${key} is not recognized as a valid option property`)\r\n            }\r\n        }\r\n    }\r\n\r\n    parse_tests(type: string, tests: any[]): any {\r\n        const map: any = {\r\n          \"string\": {\r\n              \"min\": \"minLength\",\r\n              \"max\": \"maxLength\",\r\n              \"email\": \"format\",\r\n              \"url\": \"format\",\r\n              \"uuid\": \"format\",\r\n              \"matches\": [ \"pattern\", \"regex\" ],\r\n              // required: todo\r\n          }\r\n        }\r\n\r\n        let properties: any = {};\r\n        const type_map = map[type];\r\n        for (let test of tests){\r\n              const { name, params } = test;\r\n            const match = type_map[name]\r\n            if (!match) {\r\n              console.warn(`[WARN] yuptoswagger.js: ignoring ${name}`)\r\n              continue\r\n            }\r\n            if (isArray(match) && match.length == 2) {\r\n              const [ key, value_key ] = match;\r\n              const value = params[value_key]\r\n              const value_str = value.toString ? value.toString() : value\r\n              properties[key] = value_str\r\n              continue\r\n            }\r\n            const value = params[name] || name\r\n            properties[match] = value;\r\n            console.log({ [match]: value })\r\n        }\r\n        return properties\r\n    }\r\n    parse_string_schema(type: string, properties: any) {\r\n        const { oneOf, tests } = properties;\r\n        \r\n        const enum_ = oneOf;\r\n\r\n        const schema: any = { type, enum: enum_ }\r\n        const from_test_properties = this.parse_tests(type, tests);\r\n      \r\n        console.log({ from_test_properties })\r\n        return mergeObjects({}, schema, from_test_properties);\r\n    }\r\n    parse_object_schema(type: string, properties: any) {\r\n      const schema = { type }\r\n      const fields = []\r\n      for (const field_key of Object.keys(properties.fields)) {\r\n        const field: SchemaDescription = properties.fields[field_key];\r\n        const parsed = this.compile(field)\r\n        fields.push(parsed);\r\n      }\r\n      return { ...schema, fields }\r\n    }\r\n    parse_spec_field(spec: any) {\r\n      const parsed: any = { }\r\n      \r\n      const { nullable } = spec;\r\n\r\n      if (nullable) parsed.nullable = nullable;\r\n      \r\n      return parsed;\r\n    }\r\n    isYupSchema<T extends AnySchema>(object: T): T | false {\r\n      return object.__isYupSchema__ ? object : false;\r\n    }\r\n    compile(schema: AnySchema | SchemaDescription): any;\r\n    compile(schema: AnySchema | SchemaDescription & { spec?: any }) {\r\n      let schema_description = schema;\r\n      \r\n      const yupSchema = this.isYupSchema(schema as AnySchema)\r\n      if (yupSchema) schema_description = yupSchema.describe();\r\n\r\n      console.log(schema_description,'schema_description');\r\n\r\n      const { type, ...properties } = schema_description;\r\n\r\n      let swagger_schema: any = {}\r\n      switch (type) {\r\n          case \"string\": swagger_schema = this.parse_string_schema(type, properties); break;\r\n          case \"object\": swagger_schema = this.parse_object_schema(type, properties); break;\r\n          default: return { failed: true };\r\n      }\r\n      const spec_properties = this.parse_spec_field(properties!.spec);\r\n      return { ...swagger_schema, ...spec_properties }\r\n    }\r\n}\r\n\r\nexport default YTSCompiler;"],"names":["isObject","item","Array","isArray","mergeObjects","target","sources","length","source","shift","key","concat","Object","assign","__yuptoswagger__","debug","warn","warn_","console","args","undefined","YTSCompiler","constructor","options","keys","parse_tests","type","tests","map","properties","type_map","test","name","params","match","value_key","value","value_str","toString","log","parse_string_schema","oneOf","enum_","schema","enum","from_test_properties","parse_object_schema","fields","field_key","field","parsed","compile","push","parse_spec_field","spec","nullable","isYupSchema","object","__isYupSchema__","schema_description","yupSchema","describe","swagger_schema","failed","spec_properties"],"mappings":"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"}